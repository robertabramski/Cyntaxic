package com.cyntaxic.cynmvc.model.helpers{	import com.cyntaxic.cynmvc.model.vos.DataCallVO;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.utils.Timer;
		/**	 * The <code>DataCall</code> is a helper class for <code>CynModel</code> to 	 * retrieve data from external sources.	 *  	 * @author robertabramski	 * 	 */		public class DataCall extends EventDispatcher	{		/**		 * Used to specify the HTTP GET type.		 */		public static const GET:String = "get";				/**		 * Used to specify the HTTP POST type.		 */		public static const POST:String = "post";				/**		 * Used to specify a <code>DataCall</code> timeout. 		 */		public static const TIMEOUT:String = "timeout";				/**		 * Used to specify a completion of a <code>DataCall</code>.		 */		public static const COMPLETE:String = "complete";				/**		 * Used to specify a <code>DataCall</code> input/output error.		 */		public static const IO_ERROR:String = "ioError";				/**		 * Used to specify a <code>DataCall</code> security error.		 */		public static const SECURITY_ERROR:String = "securityError";				private var _timeout:Number = 5;		private var _url:String;		private var _handle:Object;		private var _httpStatus:int;				private var loader:URLLoader;		private var request:URLRequest;		private var timer:Timer = new Timer(timeout * 1000);				/**		 * Creates a new <code>DataCall</code> object. DataCall makes calls to an external 		 * source and returns the data. 		 *  		 * @param handle The function handle to be used as a callback after the call is complete or failed. 		 * @param url The URL that is being called.		 * @param method The HTTP method to use, either GET or POST.		 * @param data The data object to be sent to the server as either GET or POST.		 * @param contentType The content type to send to the server.		 * @param headers The headers to send to the server.		 * 		 */				public function DataCall(handle:Object, url:String, method:String = "get", data:Object = null, contentType:String = null, headers:Array = null)		{			_handle = handle;			_url = url;						request = new URLRequest(url);			loader = new URLLoader();						if(contentType) request.contentType = contentType;			if(headers) request.requestHeaders = headers;			if(data) request.data = data;			request.method = URLRequestMethod[method.toUpperCase()];						loader.load(request);			loader.addEventListener(Event.COMPLETE, handleComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, handleHTTPStatus);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);						timer.addEventListener(TimerEvent.TIMER, handleTimeoutError);			timer.start();		}				private function handleHTTPStatus(event:HTTPStatusEvent):void		{			_httpStatus = event.status;		}				private function handleSecurityError(event:SecurityErrorEvent):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = event.text;			vo.url = _url;			vo.result = DataCallEvent.SECURITY_ERROR;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, handleHTTPStatus);			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.SECURITY_ERROR, _handle, vo));		}				private function handleTimeoutError(event:TimerEvent):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = "Call timed out after " + timeout + " seconds.";			vo.url = _url;			vo.result = DataCallEvent.TIMEOUT;			vo.httpStatus = _httpStatus;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, handleHTTPStatus);			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.TIMEOUT, _handle, vo));		}				private function handleComplete(event:Event):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = event.target.data as String;			vo.url = _url;			vo.result = DataCallEvent.COMPLETE;			vo.httpStatus = _httpStatus;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, handleHTTPStatus);			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.COMPLETE, _handle, vo));		}				private function handleIOError(event:IOErrorEvent):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = event.text;			vo.url = _url;			vo.result = DataCallEvent.IO_ERROR;			vo.httpStatus = _httpStatus;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, handleHTTPStatus);			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.IO_ERROR, _handle, vo));		}				/**		 * The URL that is being called by the <code>DataCall</code> object.		 *  		 * @return The URL that is being called.		 * 		 */				public function get url():String 		{			return _url;		}				/**		 * The duration of time for the timeout to occur.		 *  		 * @return The timeout number.		 * 		 */				public function get timeout():Number 		{			return _timeout;		}				public function set timeout(value:Number):void 		{			_timeout = value;			timer = new Timer(_timeout * 1000);		}	}}