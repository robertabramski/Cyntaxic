package com.cyntaxic.cynmvc.model.helpers{	import com.cyntaxic.cynmvc.model.vos.DataCallVO;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.utils.Timer;		public class DataCall extends EventDispatcher	{		public static const GET:String = "get";		public static const POST:String = "post";				public static const TIMEOUT:String = "timeout";		public static const COMPLETE:String = "complete";		public static const IO_ERROR:String = "ioError";				private var _timeout:Number = 5;		private var _url:String;		private var _handle:String;				private var loader:URLLoader;		private var request:URLRequest;		private var timer:Timer = new Timer(timeout * 1000);				public function DataCall(handle:String, url:String, method:String = "get", data:Object = null, contentType:String = "text/plain")		{			_handle = handle;			_url = url;						request = new URLRequest(url);			loader = new URLLoader();						request.contentType = contentType;			if(data) request.data = data;			request.method = URLRequestMethod[method.toUpperCase()];						loader.load(request);			loader.addEventListener(Event.COMPLETE, handleComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);						timer.addEventListener(TimerEvent.TIMER, handleTimeoutError);			timer.start();		}				private function handleTimeoutError(event:TimerEvent):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = "Call timed out after " + timeout + " seconds.";			vo.url = _url;			vo.result = DataCallEvent.TIMEOUT;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.TIMEOUT, _handle, vo));		}				private function handleComplete(event:Event):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = event.target.data as String;			vo.url = _url;			vo.result = DataCallEvent.COMPLETE;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.COMPLETE, _handle, vo));		}				private function handleIOError(event:IOErrorEvent):void		{			var vo:DataCallVO = new DataCallVO();			vo.data = event.text;			vo.url = _url;			vo.result = DataCallEvent.IO_ERROR;						timer.stop();			timer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleTimeoutError);			timer = null;						loader.removeEventListener(Event.COMPLETE, handleComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, handleIOError);			loader = null;						dispatchEvent(new DataCallEvent(DataCallEvent.IO_ERROR, _handle, vo));		}				public function get url():String 		{			return _url;		}				public function get timeout():Number 		{			return _timeout;		}		public function set timeout(value:Number):void 		{			_timeout = value;			timer = new Timer(_timeout * 1000);		}	}}