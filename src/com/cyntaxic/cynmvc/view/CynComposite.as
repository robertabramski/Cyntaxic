package com.cyntaxic.cynmvc.view{	import com.cyntaxic.cynccess.cynternal;	import com.cyntaxic.cynmvc.Cyntaxic;	import com.cyntaxic.cynmvc.controller.enums.ErrorCodes;	import com.cyntaxic.cynmvc.view.interfaces.ICynView;		import flash.display.DisplayObject;	import flash.system.System;
		/**	 * <code>CynComposite</code> is used for views that have other views inside of it. <code>CynComposite</code> 	 * has functions like <code>add</code>, <code>addAt</code>, <code>remove</code> and <code>removeAt</code> 	 * which work just like <code>addChild</code> and <code>removeChild</code> except for some added functionality for the framework.	 *  	 * @author robertabramski	 * 	 */	public class CynComposite extends CynView implements ICynView	{		use namespace cynternal;				/**		 * Creates a new instance of <code>CynComposite</code>.		 * 		 * @param self Reference to itself to enforce it as an abstract class.		 * 		 * @throws CynError If attempted to be extended without super(this).		 * 		 */		public function CynComposite(self:CynComposite)		{			if(self != this) Cyntaxic.throwError(ErrorCodes.E_1003);			super(this);		}				/**		 * Adds a <code>CynView</code> to the display list. An optional set of properties 		 * can be sent to the object at time of addition. These property names		 * match the properties of other display objects.		 *  		 * @param view The view to be added to the display list.		 * @param props An object with display object properties.		 * @return The view that was added.		 * 		 */		public function add(view:CynView, props:Object = null):CynView		{			addChild(view as DisplayObject);			addProps(view, props);						return view;		}				/**		 * Adds a <code>CynView</code> to the display list at the specified index. 		 * An optional set of properties can be sent to the object at time of addition. 		 * These property names match the properties of other display objects.		 * 		 * @param view The view to be added to the display list.		 * @param index The index to add the object at.		 * @param props An object with display object properties.		 * @return The view that was added.		 * 		 */		public function addAt(view:CynView, index:int, props:Object = null):CynView		{			addChildAt(view as DisplayObject, index);			addProps(view, props);						return view;		}				private function addProps(view:CynView, props:Object):void		{			for(var prop:String in props)			{				view[prop] = props[prop];			}		}				private function removeCompletely(view:CynView):void		{			for(var i:int = 0; i < cynModel.views.length; i++)			{				if(view == cynModel.views[i])				{					cynModel.views.splice(i, 1);					view.removeAllListeners();										for(var j:int = 0; j < view.numChildren; j++)					{						var childView:* = view.getChildAt(j);												if(childView is CynView)						{ 							removeCompletely(childView as CynView);						}					}				}			}		}				/**		 * Removes a <code>CynView</code> from the display list. When the completely flag 		 * is set the function completely destroys all reference and nulls out the object as		 * well as its children.		 *  		 * @param view The view to be removed from the display list.		 * @param completely Flag set to determine if it is removed or destroyed completely. 		 * @return The view that has been removed.		 * 		 * @see #destroy()		 * 		 */		public function remove(view:CynView, completely:Boolean = false):CynView		{			if(completely)			{				removeCompletely(view);								while(view.numChildren > 0)				{					var child:DisplayObject = view.removeChildAt(0);					child = null;				}								removeChild(view as DisplayObject);				view = null; System.gc();			}			else removeChild(view as DisplayObject);						return view;		}				/**		 * Removes a <code>CynView</code> from the display list at the specified index. When the 		 * completely flag is set the function completely destroys all reference and nulls out the 		 * object as well as its children.		 *  		 * @param index The index at which to remove the view.		 * @param completely Flag set to determine if it is removed or destroyed completely.		 * @return The view that has been removed.		 * 		 * @throws CynError If object at index is not a <code>CynView</code>.		 * 		 */		public function removeAt(index:int, completely:Boolean = false):CynView		{			if(getChildAt(index) is CynView) return remove(getChildAt(index) as CynView, completely);			else throw new Error(ErrorCodes.E_1001);		}				/**		 * Destroys a <code>CynView</code> from the display list. All reference is destroyed 		 * and the object is nulled out the object as well as its children.		 *  		 * @param view The view to be destroyed.		 * 		 */		public function destroy(view:CynView):void		{			remove(view, true);		}				/**		 * Destroys a <code>CynView</code> from the display list  at the specified index. 		 * All reference is destroyed and the object is nulled out the object as well as its children.		 *  		 * @param index The index at which to destroy the view.		 * 		 * @throws CynError If object at index is not a <code>CynView</code>. 		 * 		 */		public function destroyAt(index:int):void		{			removeAt(index, true);		}	}}