package net.site.stickies.view{	import com.cyntaxic.cynmvc.Cyntaxic;	import com.cyntaxic.cynmvc.CyntaxicVO;	import com.cyntaxic.cynmvc.view.CynComposite;	import com.cyntaxic.cynmvc.view.CynView;	import com.cyntaxic.cynmvc.view.interfaces.ICynComposite;	import com.cyntaxic.cynmvc.view.interfaces.ICynView;		import comps.header.UIStickyHeader;	import comps.sticky.UISticky;		import net.site.stickies.Handles;	import net.site.stickies.controller.Controller;	import net.site.stickies.model.Model;	import net.site.stickies.model.vos.StickyVO;		/**	 * All views should extend either CynComposite or CynComponent. CynComposite is used for	 * views that have other views inside of it. CynComposite has functions like add, addAt, remove	 * and removeAt which work just like addChild and removeChild except for some added functionality	 * for the framework. CynComponent has no CynView children and doesn't have any of the above functions.	 * 	 */		public class StickiesApp extends CynComposite implements ICynComposite, ICynView	{		private var model:Model;		private var controller:Controller;		private var margin:Number = 10;		private var header:UIStickyHeader = new UIStickyHeader();		private var stickySpawn:StickySpawn = new StickySpawn();						public function StickiesApp()		{			// Cast model and controller for your application.			model = (cynModel as Model);			controller = (cynController as Controller);						// Add views with CynComposite add function.			add(header);			add(stickySpawn);			  			resize(null);		}				override public function init(vo:CyntaxicVO):CynView		{			debug("Received FlashVars: " + vo.describe());						// Get XML file with stickies information.			controller.execute(Handles.GET_STICKIES_DATA, vo);						return this;		}				public function addSticky(vo:StickyVO):void		{			// UISticky is a graphic in assets/stickies.swc. It extends the 			// Sticky class for its logic. The init function is useful when instantiating 			// graphics only classes where there is a need to send params. It is chainable			// like used below is functions the same as it would if just calling a new object.			var sticky:CynView = new UISticky().init(vo);						debug('Added sticky #' + vo.id + ' to view.');						// Add the child and use the props param to position on add.			add(sticky, {x:vo.x, y:vo.y});						// Add to the sticky array. Handle matches function name in controller.			controller.execute(Handles.ADD_STICKY_TO_STICKIES, new CyntaxicVO({sticky:sticky}));		}				public function removeSticky(vo:CyntaxicVO):void		{			debug('Removed and deleted sticky #' + vo.sticky.id + ' from view.');						// Remove will just remove from display list unless the completely flag is set.			// This will do the same as destroy() which removes all reference and sets it to null.			remove(vo.sticky as Sticky, true);		}				/**		 * The resize function is overridden from CynView. This works in conjunction with		 * the Cyntaxic.fullScaleFlash option which sets up the application for liquid layout.		 * 		 */		override public function resize(vo:CyntaxicVO):void		{			// The static Cyntaxic.STAGE property allows access to stage properties anywhere.			stickySpawn.x = Cyntaxic.STAGE.stageWidth - stickySpawn.width - margin;			stickySpawn.y = margin;		}	}}